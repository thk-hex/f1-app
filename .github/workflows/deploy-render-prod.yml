name: Deploy to Render Production

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'render.yaml'
      - '.github/workflows/deploy-render-prod.yml'
  release:
    types: [published]

permissions:
  contents: read
  id-token: write

# Cancel outdated runs when new commits are pushed to the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  RENDER_SERVICE_ID: ${{ secrets.RENDER_PROD_SERVICE_ID }}
  RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: f1_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      working-directory: backend
      run: npm ci
      
    - name: Generate Prisma client
      working-directory: backend
      run: npx prisma generate
      
    - name: Run database migrations
      working-directory: backend
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/f1_test?schema=public'
      
    - name: Run linter
      working-directory: backend
      run: npm run lint
      
    - name: Run tests
      working-directory: backend
      run: npm run test
      env:
        DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/f1_test?schema=public'
        NODE_ENV: 'test'
        
    - name: Run tests with coverage
      working-directory: backend
      run: npm run test:cov
      env:
        DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/f1_test?schema=public'
        NODE_ENV: 'test'

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      working-directory: backend
      run: npm ci
      
    - name: Run security audit
      working-directory: backend
      run: npm audit --audit-level=moderate
      continue-on-error: true

  deploy:
    name: Deploy to Render Production
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Render
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ env.RENDER_SERVICE_ID }}
        api-key: ${{ env.RENDER_API_KEY }}
        
    - name: Wait for deployment to complete
      run: |
        echo "Production deployment initiated. Check Render dashboard for status."
        echo "Service URL will be available at: https://f1-app-backend-prod.onrender.com"
        
    - name: Create deployment status
      run: |
        echo "::notice title=Deployment Complete::Production deployment initiated successfully!"
        echo "::notice title=Service URL::https://f1-app-backend-prod.onrender.com" 